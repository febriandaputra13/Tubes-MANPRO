# -*- coding: utf-8 -*-
"""Learning_KKN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hgSCo1J6SB1N1DbD-E_1HeizCclpHt8
"""

import pandas as pd
import numpy as np
import pickle
import sys

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.model_selection import train_test_split

from sklearn.neighbors import KNeighborsClassifier as KNN
from sklearn.naive_bayes import GaussianNB as NBC

from sklearn.metrics import accuracy_score
from sklearn.feature_selection import f_classif

df_weather = pd.read_csv("data/weatherAUS.csv")

df_weather_baru = df_weather

from sklearn import preprocessing
le = preprocessing.LabelEncoder()

str_cols = []
df_weather_baru = df_weather.iloc[:, 2:23]

for i, type in zip(np.arange(len(df_weather_baru.columns)), df_weather_baru.dtypes):
  if type == "O":
    str_cols.append(i)

for col in str_cols:
  df_weather_baru.iloc[:,col]= le.fit_transform(np.array(df_weather_baru.iloc[:,col].values.astype("str")).ravel())

df_weather_baru = df_weather_baru.fillna(df_weather_baru.median())

df_features_weather = df_weather_baru.iloc[:, 0:19]

#jadikan Label
df_label_weather_today = df_weather_baru['RainToday']

selectorToday = SelectKBest(score_func = f_classif, k = 3)
selectorToday.fit(df_features_weather, df_label_weather_today)

sel_features_today = selectorToday.get_support(indices = 3)
kolom_sel_features_today = df_features_weather.iloc[:, sel_features_today]

x_train_today, x_test_today, y_train_today, y_test_today = train_test_split(kolom_sel_features_today, df_label_weather_today, test_size = 0.3, random_state = 1)

list_hasilToday = []
for i in range(3, 4):
 #MODEL
 KNN_MODEL_TODAY = KNN(n_neighbors=i)

 #TRAIN MODEL
 KNN_MODEL_TODAY.fit(x_train_today, y_train_today)

 #PREDICT
 y_pred_today = KNN_MODEL_TODAY.predict(x_test_today)

 #ACCURACY
 acc_today = accuracy_score(y_test_today, y_pred_today)
 list_hasilToday.append(acc_today)
#  print("ACC MODEL KNN TODAY saat k = ", str(i), " : ", str(acc_today))

bestKToday = np.argmax(list_hasilToday)
# print("hasil K Today dengan ACC tertinggi = ", bestKToday + 3)
# print("akurasi = ", list_hasilToday[bestKToday])

best_model_KNN_Today = KNN(n_neighbors= 9).fit(x_train_today, y_train_today)
pkl_filename = "KNN_Today_9.pkl"
with open(pkl_filename, "wb") as file:
  pickle.dump(best_model_KNN_Today, file)

#load
with open(pkl_filename, "rb") as file:
  loaded_model_KNN_Today = pickle.load(file)

rainfall=int(sys.argv[1] )
sunshine=int(sys.argv[2] )
humidity9am=int(sys.argv[3] )
humidity3pm=int(sys.argv[4] )
cloud3pm=int(sys.argv[5] )

# rainfall=1
# sunshine=2
# humidity9am=3
# humidity3pm=4
# cloud3pm=5

test_new_data_buat_Today = {'Rainfall':[rainfall], 'Humidity9am':[humidity9am], 'Humidity3pm':[humidity3pm]}
df_test_buat_Today = pd.DataFrame(test_new_data_buat_Today)

y_pred_new_KNN_Today = loaded_model_KNN_Today.predict(df_test_buat_Today)
hasilAkurasi = round(list_hasilToday[bestKToday] * 100, 2)

if(y_pred_new_KNN_Today[0]==0):
  print(hasilAkurasi,"% Not Raining")
else:
  print(hasilAkurasi,"% Raining")
# print(y_pred_new_KNN_Today)



# """TOMORROW"""

# #jadikan Label
# df_label_weather_tomorrow = df_weather_baru['RainTomorrow']

# selectorTomorrow = SelectKBest(score_func = f_classif, k = 3)
# selectorTomorrow.fit(df_features_weather, df_label_weather_tomorrow)

# sel_features_Tomorrow = selectorTomorrow.get_support(indices = 3)
# kolom_sel_features_Tomorrow = df_features_weather.iloc[:, sel_features_Tomorrow]

# x_train_tomorrow, x_test_tomorrow, y_train_tomorrow, y_test_tomorrow = train_test_split(kolom_sel_features_Tomorrow, df_label_weather_tomorrow, test_size = 0.3, random_state = 1)

# list_hasil_tomorrow = []
# for i in range(3, 5):
#  #MODEL
#  KNN_MODEL_tomorrow  = KNN(n_neighbors=i)

#  #TRAIN MODEL
#  KNN_MODEL_tomorrow.fit(x_train_tomorrow, y_train_tomorrow)

#  #PREDICT
#  y_pred_tomorrow = KNN_MODEL_tomorrow.predict(x_test_tomorrow)

#  #ACCURACY
#  acc_tomorrow = accuracy_score(y_test_tomorrow, y_pred_tomorrow)
#  list_hasil_tomorrow.append(acc_tomorrow)
# #  print("ACC MODEL KNN tomorrow saat k = ", str(i), " : ", str(acc_tomorrow))

# bestK_tomorrow = np.argmax(list_hasil_tomorrow)
# # print("hasil K_tomorrow dengan ACC tertinggi = ", bestK_tomorrow + 3)
# # print("akurasi_tomorrow = ", list_hasil_tomorrow[bestK_tomorrow])

# best_model_KNN_tomorrow = KNN(n_neighbors= 50).fit(x_train_tomorrow, y_train_tomorrow)
# pkl_filename_tomorrow = "KNN_50_tomorrow.pkl"
# with open(pkl_filename_tomorrow, "wb") as file:
#   pickle.dump(best_model_KNN_tomorrow, file)

# #load
# with open(pkl_filename_tomorrow, "rb") as file:
#   loaded_model_KNN_tomorrow = pickle.load(file)

# test_new_data_tomorrow = {'Sunshine':[1, 5, 210, 280, 350], 'Humidity3pm':[99, 20, 50, 75, 90], 'Cloud3pm':[99, 20, 50, 75, 90]}
# df_test_tomorrow = pd.DataFrame(test_new_data_tomorrow)

# y_pred_new_KNN_tomorrow = loaded_model_KNN_tomorrow.predict(df_test_tomorrow)
# print(y_pred_new_KNN_tomorrow)